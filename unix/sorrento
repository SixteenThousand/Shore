#!/bin/sh

WAIT_MSG="Waiting"
END_MSG="Done!"
declare -a CMD
VERBOSE=""
DELAY=0.2

function print_help {
	cat <<- EOF
	sorrento loading spinner, v1.0 [part of the Shore suite]
	Usage:
	sorrento [[-w|--wait-msg] WAITING_MESSAGE] 
	    [[-e|--end-msg] END_MESSAGE] [-v|--verbose] COMMAND ARGUMENTS...
	
	Sorrento runs COMMAND with ARGUMENTS in the background, and displays
	WAITING_MESSAGE with a loading spinner (a.k.a a Sorrento) while COMMAND
	runs. Can also display more information if the --verbose flag is used.
	
	Flags:
	-w | --wait-msg
	    Message to be displayed while waiting for COMMAND to finish.
	    Default is "Waiting"
	-e | --end-msg
	    Message to display once COMMAND is finished.
	    Default is "Done!"
	-v | --verbose
	    Print extra information about what is being run. Currently prints
	    - COMMAND and ARGUMENTS
	    - the time taken for COMMAND to run
	    - the memory used by COMMAND
	-h | --help
	    print this help message
	
	Notes:
	- GNU time is needed to run sorrento
	EOF
	exit 0
}

# parse arguments
while [ -n "$1" ]
do
	case $1 in
		-h|--help) print_help;;
		-w|--wait-msg) 
			WAIT_MSG=$2
			shift 1;;
		-e|--end-msg)
			END_MSG=$2
			shift 1;;
		-v|--verbose) VERBOSE=TRUE;;
		*) CMD+="$1 ";;
	esac
	shift 1
done


# completion indicator file; we are done when this is non-empty
ISDONE=$(mktemp done-XXXX)
# stats file; store output of GNU time
INFO=$(mktemp info-XXXX)

# set formatting of time info
export TIME="Time taken: %E\nMemory used: %Mkb"
# run the command
(env time $CMD 2> $INFO && echo "Done" > $ISDONE) &

if [ -n "$VERBOSE" ]
then
	printf "\x1b[1m-> $CMD\x1b[0m\n"
fi

# display a sorrento/loading spinner
while true
do
	printf "$WAIT_MSG | \r"
	sleep $DELAY
	printf "$WAIT_MSG / \r"
	sleep $DELAY
	printf "$WAIT_MSG - \r"
	sleep $DELAY
	printf "$WAIT_MSG \\ \r"
	sleep $DELAY
	if [ -n "$(cat $ISDONE)" ]
	then
		# note this overwrites the wait message
		printf "$END_MSG\x1b[8m$WAIT_MSG    \x1b[0m\n"
		if [ -n "$VERBOSE" ]
		then
			printf "\n"
			cat $INFO
			printf "\x1b[1m+++\x1b[0m\n"
		fi
		echo "" > $ISDONE
		break
	fi
done

rm $ISDONE
rm $INFO
